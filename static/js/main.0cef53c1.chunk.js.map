{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","children","className","s","container_reviews","FeedbackOptions","title","onClickGood","onClickNeutral","onClickBad","container_buttons","title_reviews","type","onClick","Notification","message","notification","Statistics","good","neutral","bad","total","positivePercentage","statistics_title","statistics_text","App","useState","setGood","setNeutral","setBad","countTotalFeedback","prevState","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,iBAAmB,qCAAqC,gBAAkB,sC,kBCA5FD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,cAAgB,yC,iBCAvED,EAAOC,QAAU,CAAC,kBAAoB,mCAAmC,cAAgB,iC,gBCAzFD,EAAOC,QAAU,CAAC,aAAe,qC,qICYlBC,MATf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OAAO,yBAASC,UAAWC,IAAEC,kBAAtB,SAA0CH,K,gBCoBpCI,EAtBS,SAAC,GAKlB,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WAEA,OACE,sBAAKP,UAAWC,IAAEO,kBAAlB,UACGJ,GAAS,oBAAIJ,UAAWC,IAAEQ,cAAjB,SAAiCL,IAC3C,wBAAQM,KAAK,SAASC,QAASN,EAA/B,kBAGA,wBAAQK,KAAK,SAASC,QAASL,EAA/B,qBAGA,wBAAQI,KAAK,SAASC,QAASJ,EAA/B,qB,gBCPSK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGb,UAAWC,IAAEa,aAAhB,SAA+BD,K,gBC4BzBE,EA3BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,oBAAIpB,UAAWC,IAAEoB,iBAAjB,wBACW,IAAVF,EACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,gCACE,oBAAGb,UAAWC,IAAEqB,gBAAhB,mBAAwCN,KACxC,oBAAGhB,UAAWC,IAAEqB,gBAAhB,sBAA2CL,KAC3C,oBAAGjB,UAAWC,IAAEqB,gBAAhB,kBAAuCJ,KACvC,oBAAGlB,UAAWC,IAAEqB,gBAAhB,oBAAyCH,KACzC,oBAAGnB,UAAWC,IAAEqB,gBAAhB,+BACqBF,EADrB,cCXO,SAASG,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAaMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GAO1B,OACE,8BACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEd,MAAM,wBACNC,YAxBY,WAClBoB,GAAQ,SAAAI,GAAS,OAAIA,EAAY,MAwB3BvB,eArBe,WACrBoB,GAAW,SAAAG,GAAS,OAAIA,EAAY,MAqB9BtB,WAnBW,WACjBoB,GAAO,SAAAE,GAAS,OAAIA,EAAY,QAqB5B,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAlBCU,KAAKC,MAAc,IAAPf,EAAcY,YC1BrC,IAYeI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpB,EAAD,MAEFqB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0cef53c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics_title\":\"Statistics_statistics_title__1YTsr\",\"statistics_text\":\"Statistics_statistics_text__HeKGo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"FeedbackOptions_text__1gdfy\",\"title_reviews\":\"FeedbackOptions_title_reviews__3_7iK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container_reviews\":\"Section_container_reviews__3ZkHN\",\"title_reviews\":\"Section_title_reviews__1FSIi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__2GasJ\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ children }) {\r\n  return <section className={s.container_reviews}>{children}</section>;\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({\r\n  title,\r\n  onClickGood,\r\n  onClickNeutral,\r\n  onClickBad,\r\n}) => {\r\n  return (\r\n    <div className={s.container_buttons}>\r\n      {title && <h2 className={s.title_reviews}>{title}</h2>}\r\n      <button type=\"button\" onClick={onClickGood}>\r\n        GOOD\r\n      </button>\r\n      <button type=\"button\" onClick={onClickNeutral}>\r\n        NEUTRAL\r\n      </button>\r\n      <button type=\"button\" onClick={onClickBad}>\r\n        BAD\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className={s.notification}>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <h2 className={s.statistics_title}>Statistics</h2>\r\n    {total === 0 ? (\r\n      <Notification message=\"No feedback given\" />\r\n    ) : (\r\n      <div>\r\n        <p className={s.statistics_text}>Good: {good}</p>\r\n        <p className={s.statistics_text}>Neutral: {neutral}</p>\r\n        <p className={s.statistics_text}>Bad: {bad}</p>\r\n        <p className={s.statistics_text}>Total: {total}</p>\r\n        <p className={s.statistics_text}>\r\n          Positive feedback:{positivePercentage}%\r\n        </p>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { useState } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onClickGood = () => {\n    setGood(prevState => prevState + 1);\n  };\n\n  const onClickNeutral = () => {\n    setNeutral(prevState => prevState + 1);\n  };\n  const onClickBad = () => {\n    setBad(prevState => prevState + 1);\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good * 100) / countTotalFeedback());\n  };\n\n  return (\n    <div>\n      <Section>\n        <FeedbackOptions\n          title=\"Please leave feedback\"\n          onClickGood={onClickGood}\n          onClickNeutral={onClickNeutral}\n          onClickBad={onClickBad}\n        />\n\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </div>\n  );\n}\n\n// class oldApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   onClickGood = () => {\n//     this.setState(prevState => ({\n//       good: prevState.good + 1,\n//     }));\n//   };\n\n//   onClickNeutral = () => {\n//     this.setState(prevState => ({\n//       neutral: prevState.neutral + 1,\n//     }));\n//   };\n\n//   onClickBad = () => {\n//     this.setState(prevState => ({\n//       bad: prevState.bad + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     return Math.round((this.state.good * 100) / total);\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n//     const { onClickGood, onClickNeutral, onClickBad } = this;\n//     return (\n//       <div>\n//         <Section>\n//           <FeedbackOptions\n//             title=\"Please leave feedback\"\n//             onClickGood={onClickGood}\n//             onClickNeutral={onClickNeutral}\n//             onClickBad={onClickBad}\n//           />\n\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positivePercentage}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}